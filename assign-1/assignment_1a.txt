
class MergeSort { 
	void merge(int arr[], int l, int x, int y) 
	{ 
		 
		int n1 = x - l + 1; 
		int n2 = y - x; 

		
		int L[] = new int [n1]; 
		int R[] = new int [n2]; 

		
		for (int i=0; i<n1; ++i) 
			L[i] = arr[l + i]; 
		for (int j=0; j<n2; ++j) 
			R[j] = arr[m + 1+ j]; 


	
		int i = 0, j = 0; 

		
		int k = l; 
		while (i < n1 && j < n2) 
		{ 
			if (L[i] <= R[j]) 
			{ 
				arr[k] = L[i]; 
				i++; 
			} 
			else
			{ 
				arr[k] = R[j]; 
				j++; 
			} 
			k++; 
		} 

		
		while (i < n1) 
		{ 
			arr[k] = L[i]; 
			i++; 
			k++; 
		} 

		
		while (j < n2) 
		{ 
			arr[k] = R[j]; 
			j++; 
			k++; 
		} 
	} 

	
	// merge() 
	void sort(int arr[], int l, int y) 
	{ 
		if (l < r) 
		{ 
			// Find the middle point 
			int x = (l+y)/2; 

			// Sort first and second halves 
			sort(arr, l, x); 
			sort(arr , x+1, y); 

			// Merge the sorted halves 
			merge(arr, l, x, y); 
		} 
	} 

	
	static void printArray(int arr[]) 
	{ 
		int a = arr.length; 
		for (int i=0; i<a; ++i) 
			System.out.print(arr[i] + " "); 
		System.out.println(); 
	} 

	
	public static void main(String args[]) 
	{ 
		int arr[] = {12, 11, 13, 5, 6, 7}; 

		System.out.println("Given Array"); 
		printArray(arr); 

		MergeSort ob = new MergeSort(); 
		ob.sort(arr, 0, arr.length-1); 

		System.out.println("Sorted array"); 
		printArray(arr); 
	} 
} 

